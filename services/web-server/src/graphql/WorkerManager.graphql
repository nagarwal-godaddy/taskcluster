type WorkerManagerWorkerPoolSummary {
    workerPoolId: String!
    description: String
    owner: String!
    providerId: String!
    config: JSON
    emailOnError: Boolean!
    currentCapacity: Int!
    requestedCount: Int!
    runningCount: Int!
    stoppingCount: Int!
    stoppedCount: Int!
    requestedCapacity: Int!
    runningCapacity: Int!
    stoppingCapacity: Int!
    stoppedCapacity: Int!
    pendingTasks: Int #this value comes from a separate request to queue
}

type WorkerManagerWorkerPoolSummaryConnection implements Connection {
  pageInfo: PageInfo
  edges: [WorkerManagerWorkerPoolSummaryEdge]
}

type WorkerManagerWorkerPoolSummaryEdge implements Edge {
  cursor: String
  node: WorkerManagerWorkerPoolSummary
}

type WorkerManagerError {
    workerPoolId: String!
    errorId: ID!
    kind: String!
    title: String!
    description: String!
    reported: DateTime!
    extra: JSON!
}

type WorkerManagerErrorsStatsConnection implements Connection {
  pageInfo: PageInfo
  edges: [WorkerManagerErrorsEdge]
}

type WorkerManagerErrorsConnection implements Connection {
  pageInfo: PageInfo
  edges: [WorkerManagerErrorsEdge]
}

type WorkerManagerErrorsEdge implements Edge {
  cursor: String
  node: WorkerManagerError
}

type WorkerManagerProvider {
    providerId: String!
    providerType: String!
}

type WorkerManagerProvidersConnection implements Connection {
  pageInfo: PageInfo
  edges: [WorkerManagerProvidersEdge]
}

type WorkerManagerProvidersEdge implements Edge {
  cursor: String
  node: WorkerManagerProvider
}

input WorkerPoolInput {
    providerId: String!
    description: String!
    owner: String!
    emailOnError: Boolean!
    config: JSON!
}


type WorkerPoolErrorTotals {
  total: Int!
  hourly: JSON!
  daily: JSON!
  title: JSON!
  code: JSON!
  workerPool: JSON!
}

type WorkerManagerErrorsStats {
  workerPoolId: String!
  totals: WorkerPoolErrorTotals!
}

type WMWorker {
  workerPoolId: String!
  workerGroup: String!
  workerId: String!
  providerId: String!
  state: String!
  created: DateTime!
  expires: DateTime!
  capacity: Int!
  lastModified: DateTime!
  lastChecked: DateTime!
}

type WorkerManagerWorkerEdge implements Edge {
  cursor: String
  node: WMWorker
}

type WorkerManagerWorkerConnection {
  pageInfo: PageInfo
  edges: [WorkerManagerWorkerEdge]
}

extend type Query {
    WorkerManagerWorkerPoolSummaries(connection: PageConnection, filter: JSON): WorkerManagerWorkerPoolSummaryConnection!

    WorkerManagerErrors(workerPoolId: String, connection: PageConnection, filter: JSON): WorkerManagerErrorsConnection!
    WorkerManagerErrorsStats(workerPoolId: String): WorkerManagerErrorsStats!

    WorkerPool(workerPoolId: String!): WorkerManagerWorkerPoolSummary

    WorkerManagerProviders(connection: PageConnection, filter: JSON): WorkerManagerProvidersConnection!

    WorkerManagerWorkers(workerPoolId: String!, state: String, connection: PageConnection): WorkerManagerWorkerConnection!
}

extend type Mutation {
    createWorkerPool(workerPoolId: String!, payload: WorkerPoolInput!): WorkerManagerWorkerPoolSummary

    updateWorkerPool(workerPoolId: String!, payload: WorkerPoolInput!): WorkerManagerWorkerPoolSummary

    deleteWorkerPool(workerPoolId: String!): String
}
